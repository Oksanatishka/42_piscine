Missing exercises


================================================================================

int             ft_putchar(char c);

void    ft_print_numbers(void)
{
        int number;

        number = '0';
        while (number <= '9')
        {
                ft_putchar(number);
                number = number + 1;
        }
}
RESULT: 0123456789
-=-==-=-=-=-=-=-=-=--=-=-=-===-=-=-=--=-=-=-=====--=-==-=-=-=-=-=-=-==-===-=-==---=



Assignment name  : aff_a
Expected files   : aff_a.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string, and displays the first 'a' character it
encounters in it, followed by a newline. If there are no 'a' characters in the
string, the program just writes a newline. If the number of parameters is not
1, the program displays 'a' followed by a newline.

Example:

$> ./aff_a "abc" | cat -e
a$
$> ./aff_a "dubO a POIL" | cat -e
a$
$> ./aff_a "zz sent le poney" | cat -e
$
$> ./aff_a | cat -e
a$
--------------------

#include <unistd.h>

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

char	aff_a(char	*str)
{
	int		i;
	
	i = 0;
	while (str[i] != '\0')
	{
		if (str[i] != 'a')
			i++;
		else if (str[i] == 'a')
		{
			return (str[i]);
		}
	}
	return ('\n');
}

int		main(int argc, char **argv)
{
	if ((argc == 1) || (argc > 2))
	{
		ft_putchar('a');
		ft_putchar('\n');
	}
	else
		ft_putchar(aff_a(argv[1]));
	return (0);
}

--------------------------------------------------------------------------------

Assignment name  : aff_first_param
Expected files   : aff_first_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its first
argument followed by a \n.

If the number of arguments is less than 1, the program displays \n.

Example:

$> ./aff_first_param vincent mit "l'ane" dans un pre et "s'en" vint | cat -e
vincent$
$> ./aff_first_param "j'aime le fromage de chevre" | cat -e
j'aime le fromage de chevre$
$> ./aff_first_param
$
--------------------
#include <unistd.h>

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

char	ft_first_param(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
	{
		ft_putchar(str[i]);
		i++;
	}
	ft_putchar('\n');
	return (*str);
}

int		main(int argc, char **argv)
{
	if (argc >= 2)
	{
		ft_first_param(argv[1]);
	}
	else
	{
		ft_putchar('\n');
	}
	return (0);
}

--------------------------------------------------------------------------------

Assignment name  : aff_last_param
Expected files   : aff_last_param.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes strings as arguments, and displays its last
argument followed by a newline.

If the number of arguments is less than 1, the program displays a newline.

Examples:

$> ./aff_last_param "zaz" "mange" "des" "chats" | cat -e
chats$
$> ./aff_last_param "j'aime le savon" | cat -e
j'aime le savon$
$> ./aff_last_param
$
----------------------------------
#include <unistd.h>

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

char	ft_last_param(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
	{
		ft_putchar(str[i]);
		i++;
	}
	ft_putchar('\n');
	return (*str);
}

int		main(int argc, char **argv)
{
	if (argc < 2)
	{
		ft_putchar('\n');
	}
	else
	{
		ft_last_param(argv[argc - 1]);
	}
	return (0);
}
--------------------------------------------------------------------------------


Assignment name  : ft_countdown
Expected files   : ft_countdown.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays all digits in descending order, followed by a
newline.

Example:
$> ./ft_countdown | cat -e
9876543210$
$
----------------------------------

#include <unistd.h>

void	ft_putchar(char c)
{
	write(1, &c, 1);
}

int		main(void)
{
	int i;

	i = 9;
	while (i >= 0)
	{
		ft_putchar(i + '0');
		i--;
	}
	ft_putchar('\n');
	return (0);
}

-----------------------------------------------------------------------------------





Assignment name  : maff_alpha
Expected files   : maff_alpha.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays the alphabet, with even letters in uppercase, and
odd letters in lowercase, followed by a newline.

Example:

$> ./maff_alpha | cat -e
aBcDeFgHiJkLmNoPqRsTuVwXyZ$

-----------------------------

#include <unistd.h>

int		main(void)
{
	char min;
	char maj;
	int i;

	min = 'a';
	maj = 'B';
	i = 0;
	while (i <= 12)
	{
		write(1, &min, 1);
		write(1, &maj, 1);
		min = min + 2;
		maj = maj + 2;
		i++;
	}
	write(1, "\n", 1);
	return (0);
}

----------------------------------------------------------------------------------------------


Assignment name  : only_z
Expected files   : only_z.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that displays a 'z' character on the standard output.

-----------------

#include <unistd.h>

int		main(void)
{
	char lettre;

	lettre = 'z';
	write(1, &lettre, 1);
	return (0);
}

-------------------------------------------------------------------------------------------


